name: Deploy Firebase Functions

on:
  workflow_dispatch:
  push:
    paths:
      - 'functions/**'
      - 'firebase.json'
      - 'firestore.rules'
      - 'firestore.indexes.json'
      - 'storage.rules'

permissions:
  contents: read
  id-token: write

concurrency:
  group: firebase-functions-deploy
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy Cloud Functions
    runs-on: ubuntu-latest
    env:
      TARGET_PROJECT: courthub-app
      GEOAPIFY_KEY: ${{ secrets.GEOAPIFY_KEY }}
    steps:
      - name: WORKFLOW SIGNATURE
        run: |
          echo "Firebase Functions Deploy v2 — $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "Commit: $GITHUB_SHA"
          echo "Repo:   $GITHUB_REPOSITORY"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20 (no cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Show service account key metadata (safe)
        if: ${{ always() }}
        env:
          SA_JSON: ${{ secrets.FIREBASE_DEPLOY_KEY }}
        run: |
          if [ -z "$SA_JSON" ]; then
            echo "::warning::FIREBASE_DEPLOY_KEY is not set in repo secrets.";
          else
            node -e "const sa=JSON.parse(process.env.SA_JSON);\
              console.log('SA project_id:', sa.project_id);\
              console.log('SA client_email:', sa.client_email);\
              console.log('SA type:', sa.type);\
              const kid=(sa.private_key_id||'').toString();\
              console.log('SA key_id prefix:', kid ? kid.slice(0,8)+'…' : '(none)');"
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_DEPLOY_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Print active gcloud account and project (safe)
        if: ${{ always() }}
        run: |
          gcloud config list
          gcloud auth list

      - name: Warn if SA project != target project
        if: ${{ always() }}
        env:
          SA_JSON: ${{ secrets.FIREBASE_DEPLOY_KEY }}
          TARGET_PROJECT: ${{ env.TARGET_PROJECT }}
        run: |
          if [ -n "$SA_JSON" ]; then
            node -e "const sa=JSON.parse(process.env.SA_JSON||'{}');\
              const tgt=process.env.TARGET_PROJECT;\
              const ok=sa.project_id===tgt;\
              console.log('Service account project matches target:', ok, '('+(sa.project_id||'unknown'),'vs',tgt+')');\
              if(!ok){console.log('::warning::Service account project does not match TARGET_PROJECT');}"
          fi

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@13

      - name: Repo tree (top-level)
        run: |
          echo "--- ls -la (repo root) ---"
          ls -la
          echo "--- ls -la functions/ (if exists) ---"
          [ -d functions ] && ls -la functions || echo "(no functions directory)"

      - name: Locate firebase.json and set paths
        id: locate_cfg
        shell: bash
        run: |
          set -e
          if [ -f firebase.json ]; then
            FIREBASE_DIR='.'
          elif [ -f functions/firebase.json ]; then
            FIREBASE_DIR='functions'
          else
            echo "::error::firebase.json not found at repo root or functions/."
            echo "Repository tree:"; ls -la; echo "functions/ tree:"; [ -d functions ] && ls -la functions || true
            exit 1
          fi
          # Make FIREBASE_DIR visible to this step's sub-processes and to later steps
          export FIREBASE_DIR="$FIREBASE_DIR"
          echo "Using FIREBASE_DIR=$FIREBASE_DIR"
          echo "FIREBASE_DIR=$FIREBASE_DIR" >> $GITHUB_ENV
          # Derive functions source directory from firebase.json
          FUNCTIONS_SOURCE=$(node -e "const fs=require('fs');const p=process.env.FIREBASE_DIR+'/firebase.json';const cfg=JSON.parse(fs.readFileSync(p,'utf8'));const src=(cfg.functions&&cfg.functions.source)||'functions';process.stdout.write(src)")
          echo "FUNCTIONS_SOURCE=$FUNCTIONS_SOURCE" >> $GITHUB_ENV
          FUNCTIONS_ABS_DIR="$FIREBASE_DIR/$FUNCTIONS_SOURCE"
          echo "FUNCTIONS_ABS_DIR=$FUNCTIONS_ABS_DIR" >> $GITHUB_ENV
          echo "Resolved functions directory: $FUNCTIONS_ABS_DIR"

      - name: Install functions dependencies (with fallback)
        working-directory: ${{ env.FUNCTIONS_ABS_DIR }}
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "Using npm ci";
            npm ci || { echo "npm ci failed, falling back to npm install"; npm install; }
          else
            echo "No lockfile found. Running npm install";
            npm install
          fi

      # Optional: set functions:config values if secret is provided. Continue on error while IAM is being fixed.
      - name: Set Firebase functions config (geoapify)
        if: ${{ env.GEOAPIFY_KEY != '' }}
        continue-on-error: true
        working-directory: ${{ env.FIREBASE_DIR }}
        run: |
          echo "Setting functions config for maps.geoapify_key"
          firebase --project ${{ env.TARGET_PROJECT }} functions:config:set maps.geoapify_key="$GEOAPIFY_KEY"

      - name: Deploy Cloud Functions
        working-directory: ${{ env.FIREBASE_DIR }}
        run: |
          echo "Deploying from $(pwd) using $(ls -1 firebase.json)"
          firebase deploy --only functions --project ${{ env.TARGET_PROJECT }}
